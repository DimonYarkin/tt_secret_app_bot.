import telebot
from telebot import types

# t.me/tt_secret_app_bot
TOKEN = '6651199720:AAEDz5D_75THAwsrMR7IFajHeFbGsmIDys8'
bot = telebot.TeleBot(TOKEN)
ls_dict = {}


# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def get_chanels():
    dic_chan = {'https://t.me/anikdot_market': '@anikdot_market',
                'https://t.me/futbol_clubs': '@futbol_clubs',
                'https://t.me/new_chanel1_1': '@new_chanel1_1',
                'https://t.me/mmarket_place': '@mmarket_place',
                'https://t.me/topcash_game': '@topcash_game',

                }
    return dic_chan


def check_chat_member(user_id, TELEGRAM_CHANNEL_ID):
    try:
        member = bot.get_chat_member(TELEGRAM_CHANNEL_ID, user_id)
        if member.status not in ['member', 'administrator', 'creator']:
            return False
        else:
            return True
    except:
        return False


def check_valide_chats(user_id):
    for key, value in get_chanels().items():
        if not check_chat_member(user_id, value):
            return False
    return True


# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def get_handler():
    text_hand = '<b>–î–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –ø–ª–∞—Ç–Ω—ã–º, –Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—è –Ω–∞—à–∏–º —Å–ø–æ–Ω—Å–æ—Ä–∞–º –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –≤–∞–º –Ω—É–∂–Ω–æ –ª–∏—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª :</b>‚¨áÔ∏è'
    return text_hand


def get_message_sponsor(message):
    global ls_dict
    markup = types.InlineKeyboardMarkup()
    for key, value in get_chanels().items():
        btn_sp = types.InlineKeyboardButton(text=value, callback_data='btn', url=key)
        markup.add(btn_sp)
    ls_dict[message.chat.id].append(
        bot.send_message(message.chat.id, get_handler(), parse_mode='html', reply_markup=markup).id)

    markup1 = types.InlineKeyboardMarkup()
    btn2 = types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='end')
    markup1.add(btn2)
    ls_dict[message.chat.id].append(
        bot.send_message(message.chat.id, "üö´ –û—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –æ—Ç —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –Ω–µ–ª—å–∑—è, –∏–Ω–∞—á–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                         reply_markup=markup1).id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
@bot.message_handler(commands=['start'])
def main(message):
    global ls_dict
    ls_dict[message.chat.id] = []

    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='recept')
    markup.add(btn1)
    ls_dict[message.chat.id].append(
        bot.send_message(message.chat.id,
                         "<b>–ü—Ä–∏–≤–µ—Ç</b> üëã  \n –í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã —Å–º–æ–∂–µ—à—å —Å–∫–∞—á–∞—Ç—å —Ç–æ —Å–∞–º–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ —Ç—Ç \n –ñ–º–∏ ¬´–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ü§´",
                         parse_mode='html', reply_markup=markup).id)
    # ls_dict[message.chat.id].append(bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Ä–µ—Ü–µ–ø—Ç", reply_markup=markup).id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª –±—ç–∫ —Ñ—É–Ω–∫—Ü–∏–Ω –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    global ls_ms, ls_dict
    bot.delete_message(call.message.chat.id, call.message.message_id)

    if call.data == "recept":
        get_message_sponsor(call.message)

    if call.data == "end":
        if not check_valide_chats(call.from_user.id):
            for ls in ls_dict[call.message.chat.id]:
                try:
                    bot.delete_message(call.message.chat.id, ls)
                except Exception as e:
                    pass
            ls_dict[call.message.chat.id] = []
            ls_dict[call.message.chat.id].append(
                bot.send_message(call.message.chat.id,
                                 "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ üòî <b>, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: </b>",
                                 parse_mode='html').id)

            get_message_sponsor(call.message)
        else:
            for ls in ls_dict[call.message.chat.id]:
                try:
                    bot.delete_message(call.message.chat.id, ls)
                except Exception as e:
                    pass
            ls_dict.pop(call.message.chat.id)
            strms = "<b>–ì–æ—Ç–æ–≤–æ!</b> ‚úÖ \n \n"
            strms += "–ù–∞—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∞–∫—Ç–∏–≤–Ω–æ –∑–∞–Ω–∏–º–∞—é—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–≤–æ–µ–π \n"
            strms += "–ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤, –ø—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ ‚ù§Ô∏è \n \n"
            strms += "‚ÄºÔ∏è<b>–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –∑–∞–∫–æ–Ω—á–µ–Ω–∞, —Ñ–∞–π–ª –±—É–¥–µ—Ç</b> \n"
            strms += "<b>–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—é–¥–∞</b> ‚ÄºÔ∏è\n \n"
            strms += "üö´–í–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–µ–ª—å–∑—è –æ—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –æ—Ç –∫–∞–Ω–∞–ª–æ–≤ \n"
            strms += "—Å–ø–æ–Ω—Å–æ—Ä–æ–≤, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç. \n"


            bot.send_message(call.message.chat.id, strms, parse_mode='html')

            # file = open(r'1.txt', 'rb')
            # bot.send_document(call.message.chat.id, file)


if __name__ == '__main__':
    bot.infinity_polling()
